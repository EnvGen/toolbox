#!/usr/bin/env python
# coding: utf-8
"""A script to calculate average coverage for features from a bedtools histogram file

Typically generated by:

    bedtools coverage -hist -a genes_on_contigs.bed -b mapping_to_contigs.bam > histogram.tsv

Output:
    Tab separated values: gene id, average coverage and gene length, printed to stdout.

"""
import sys
import argparse
import pandas as pd

INPUT_COLUMNS_EXPECTED = ['contig_id', 'gene_start', 'gene_end', 'gene_id', \
        'depth', 'bases_with_depth', 'gene_length', 'fraction_with_depth']

def main(args):
    df = pd.read_table(args.histogram, names=INPUT_COLUMNS_EXPECTED)

    # Filter away unwanted rows
    df = df[df['contig_id'] != 'all']

    # Calculate coverage per depth value, summing this column 
    # generates average base coverage
    df['avg_coverage'] = df['depth'].multiply(df['fraction_with_depth'])

    # Sum average coverage for each gene. Hack to keep gene_length column. 
    # It will be the same for all rows for the same gene, so mean will be gene length.
    cov_df = df.groupby("gene_id", sort=False).aggregate(
            {'avg_coverage': 'sum', 'gene_length': 'mean'}
            )

    # Pretty output formatting
    cov_df['gene_length'] = cov_df['gene_length'].astype(int)

    # Print result to stdout
    cov_df.to_csv(sys.stdout, sep='\t', float_format='%g')


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description = __doc__, 
            formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('histogram', help=("Tab separated histogram file from bedtools."
            "Expected columns: {}").format(INPUT_COLUMNS_EXPECTED))
    args = parser.parse_args()
    main(args)
